#summary How to install JAFFA

JAFFA is designed to be run on the bash command-line in linux. Having an understanding
of bash (and R) would be useful to understand what the pipeline is doing, but shouldn't
be a requirement. 

= Required software =
Before installing JAFFA, there are quite a few other programs which must be install first.

  * [https://code.google.com/p/bpipe/ Bpipe] - This is a framework for managing pipeline. It's convenient because it allows multiple jobs to be run in parallel, easy restarting of jobs and a lot of other great features. JAFFA has been written using bpipe to control the pipeline stages.

  * [http://www.bioconductor.org/ R] (with the bioconductor package GenomicRanges ) - Some of our filtering and data processing steps have been written as R scripts. In the future we may rewrite then to python to improve performance and remove the requirement to have R installed. 

  * [http://samtools.sourceforge.net/ Samtools]
  * [http://genome.ucsc.edu/FAQ/FAQblat.html#blat3 BLAT]
  * [http://hannonlab.cshl.edu/fastx_toolkit/ Fastx tools]
  * [http://www.ebi.ac.uk/~zerbino/oases/ Oases ] and  [http://www.ebi.ac.uk/~zerbino/velvet/ Velvet] - Assemblers. You don't need to install these if you are doing the non-assembly pipeline (JAFFA_no_assemble.groovy)
  * [http://www.usadellab.org/cms/?page=trimmomatic Trimmomatic]
  * [http://bowtie-bio.sourceforge.net/bowtie2/index.shtml bowtie2] 

Note that may of these tool (like the assembler, trimming software and mapper) can be easily replaced in the pipeline with your favourites. 

The first step of the JAFFA pipeline is to check that the required software has been installed. You should get a warning if any of the commands are not found.

= Installing =

  # Download the JAFFA tar ball from [here]

  # unzip and untar using "gunzip <filename> ; tar -xvf <file.tar>"

  # Download the human genome, [http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz hg19], from UCSC if you don't already have it. JAFFA expects a single fasta file. So if you download the files above, you'll need to  unzip and untar then combine all the chromosomal fasta files together. e.g. "cat chr*.fa > hg19.fa". By default JAFFA will be expecting this file to be in the root of the JAFFA code directory. You can either copy it there, create a symbolic link to it ("ln -s <path_to_hg19> <path_to_JAFFA_directory>") or, provide the path to your hg19.fa file in the pipeline file "JAFFA_stages.groovy".

  # Configure the JAFFA pipeline options for your data. Open JAFFA_stages.groovy in your favourite editor, at the top of this file are some variable you might want to change. In particular:
    * read_length - the length of your reads
    * threads - programs called by JAFFA, that allow parallelisation will be called with this many threads. Note that this will only be the number of threads for one sample. For example if you run JAFFA on 10 samples at once, with threads set to 4, you could potentially have 40 threads running simultaneously. 
   * hgFasta - this is the path to the human genome. If you leave this unchanged it will default to the directory of the JAFFA package
   * fastq_input_format - This tells bpipe how to split on samples and group of read pairs. The default should work if your reads are named like "SampleA_1.fastq.gz SampleA_2.fastq.gz SampleB_1.fastq.gz SampleB_2.fastq.gz" etc. JAFFA will create one directory for each sample. If you find this does not happen in a way you expect, you might need to adjust this variable. See the end of [https://code.google.com/p/bpipe/wiki/ParallelTasks this] bpipe doc page for more information.

Note that any variable defined in the pipeline can also be set temporarily at runtime with the bpipe -p option.

  # Run on the test data....?


= Running =

The first step of the JAFFA pipeline is to check that the required software has been installed. You should get a warning any of the commands are not found.



= Feedback =
Please report any issue you find to us. This is a very new version of the software and we looking forward to ironing out bugs etc. with our pilot users. If you find that everything goes smoothly, we'd also like to know that! Feedback is more useful that you might realise.